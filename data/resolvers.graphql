import {
    NFTs,
    NFTCollections
} from '../db/dbConnector.js'

/**
 * GraphQL Resolvers 
 **/

export const resolvers = {
    Query: {
        getAllNFT: (root) => {
            return new Promise((resolve, reject) => {
                NFTs.find((err, nfts) => {
                    if (err) reject(err);
                    else resolve(nfts);
                })
            })
        },
        getAllCollection: (root) => {
            return new Promise((resolve, reject) => {
                NFTCollections.find((err, collections) => {
                    if (err) reject(err);

                    resolve(collections);

                })
            }).then(collections => {
                return Promise.all(collections.map(collection => {
                    return new Promise((resolve, reject) => {
                        NFTs.find({
                            address: collection.address
                        }, (err, tokens) => {
                            if (err) reject(err);
                            resolve({
                                ...collection,
                                tokens: tokens
                            });
                        })
                    });
                }));

            }).then(items => {
                return items.map(i => {
                    const clone = Object.assign({}, i, {
                        tokens: undefined
                    });
                    if (i.tokens.length !== 0) {
                        return clone;
                    }
                }).filter(i => i);
            })
        },
        getNFTByOwner: (root, {
            address
        }) => {
            return new Promise((resolve, reject) => {
                NFTs.find({
                    owner: address
                }, (err, tokens) => {
                    if (err) reject(err);
                    else resolve(tokens);
                })
            })
        }
    }
};